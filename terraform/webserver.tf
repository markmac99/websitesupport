# copyright mark mciontyre, 2024-

# create the webserver

data "aws_vpc" "main" {
    id = "vpc-a19015c8"
}
data "aws_subnet" "subnet2" {
  filter {
    name   = "tag:Name"
    values = ["Subnet2"]
  }
}

data "aws_key_pair" "marks_key" {
  key_name           = "markskey"
}


resource "aws_instance" "webserver" {
  ami                  = "ami-0beb9a0562a969e9f"
  instance_type        = "t3a.small"
  iam_instance_profile = data.aws_iam_instance_profile.s3fullaccess.name
  key_name             = data.aws_key_pair.marks_key.key_name
  security_groups      = [aws_security_group.webserver_sg.name]

  root_block_device {
    tags = {
      "Name"       = "WebserverRootDisk"
      "billingtag" = "MarysWebsite"
    }
    volume_size = 50
    volume_type = "gp3"
    throughput = 125
    iops = 3000
    encrypted = false
  }
  tags = {
    "Name"       = "newWebserver"
    "billingtag" = "MarysWebsite"
  }
}

resource "aws_network_interface" "webserver_nic" {
  subnet_id   = data.aws_subnet.subnet2.id
  ipv6_address_list_enabled = false
  private_ip_list_enabled   = false
  tags = {
    billingtag = "MarysWebsite"
  }
}

resource "aws_network_interface_attachment" "webserver" {
  instance_id          = aws_instance.webserver.id
  network_interface_id = aws_network_interface.webserver_nic.id
  device_index         = 0
}

resource "aws_eip" "webserverip" {
  instance = aws_instance.webserver.id
  tags = {
    billingtag = "MarysWebsite"
    Name       = "website_eip"
  }
}

data "aws_iam_instance_profile" "s3fullaccess" {
    name = "S3FullAccess"
}

resource "aws_security_group" "webserver_sg" {
  name        = "WordPress Multisite Certified by Bitnami and Automattic-5-3-0 on Ubuntu 16-04-AutogenByAWSMP-"
  description = "This security group was generated by AWS Marketplace and is based on recommended settings for WordPress Multisite Certified by Bitnami and Automattic version 5.3-0 on Ubuntu 16.04 provided by Bitnami"
  vpc_id      = data.aws_vpc.main.id

  tags = {
    billingtag = "MarysWebsite"
  }
}

resource "aws_vpc_security_group_ingress_rule" "rule_https" {
  security_group_id = aws_security_group.webserver_sg.id
  cidr_ipv4         = "0.0.0.0/0"
  from_port         = 443
  ip_protocol       = "tcp"
  to_port           = 443
}

resource "aws_vpc_security_group_ingress_rule" "rule_http" {
  security_group_id = aws_security_group.webserver_sg.id
  cidr_ipv4         = "0.0.0.0/0"
  from_port         = 80
  ip_protocol       = "tcp"
  to_port           = 80
}

resource "aws_vpc_security_group_ingress_rule" "rule_993" {
  security_group_id = aws_security_group.webserver_sg.id
  cidr_ipv4         = "0.0.0.0/0"
  from_port         = 993
  ip_protocol       = "tcp"
  to_port           = 993
}

resource "aws_vpc_security_group_ingress_rule" "rule_ssh" {
  security_group_id = aws_security_group.webserver_sg.id
  cidr_ipv4         = "0.0.0.0/0"
  from_port         = 22
  ip_protocol       = "tcp"
  to_port           = 22
}